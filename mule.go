package mule

import (
	"fmt"
	"log"
	"net/http"
)

// generated by https://patorjk.com/software/taag/#p=display&f=BlurVision%20ASCII&t=MULE
const muleImage = `░▒▓██████████████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓████████▓▒░ 
░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░        
░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░        
░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓██████▓▒░   
░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░        
░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░        
░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░░▒▓██████▓▒░░▒▓████████▓▒░▒▓████████▓▒░ `

func New() *App {
	return &App{NewRouter()}
}

// 实现 http.Handler
type App struct {
	IRouter
}

func (a *App) ServeHTTP(response *Response, request *Request) {
	ctx := &Context{
		request:  request,
		response: response,
	}
	method := ctx.request.Method
	rPath := ctx.request.Path
	handlersChain, ok := a.MatchHandlersChain(method, rPath)
	if !ok {
		ctx.SetResponse(http.StatusNotFound, "application/json", "")
	}
	for _, handler := range handlersChain {
		handler(ctx)
	}
}

func (a *App) Run(addr string) error {
	fmt.Println(muleImage)
	log.Printf("strong mule runs on %+v\n", addr)
	svr := NewServer(addr, a)
	return svr.ListenAndServe()
}

type HandleFunc func(ctx *Context)

type HandlersChain []HandleFunc
